<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="laundryMapper">
	
	<!-- 세탁소 등록 -->
	<insert id="insertLaundry" parameterType="laundry">
		insert into laundry
		values(laundry_Seq.nextval, #{userId}, #{laundryName}, #{laundryTel}, #{laundryAddress},#{laundryLatitude} , #{laundryAccountNumber}, 3000, #{laundryLongtitude})
		<!-- sysdate 대신 systimestamp! -->
	</insert>
	
	<!-- 세탁소 수정 -->
	<update id="updateLaundry" parameterType="laundry">
		update laundry 
		set 
		<!-- 수정 요소 : 세탁소 이름, 전화번호, 세탁소 주소 (위도 경도 포함) -->
		laundry_name = #{laundryName},
		laundry_tel = #{laundryTel},
		laundry_address = #{laundryAddress},
		laundry_latitude = #{laundryLatitude},
		laundry_longtitude = #{laundryLongtitude}
		where user_id = #{userId}
	</update>
	
	<!-- 세탁소 요금 추가 -->
	<insert id="insertFee" parameterType="fee">
		insert into fee
		values (fee_Seq.nextval, laundry_Seq.currval, #{clothesId}, #{clothesFee})
	</insert>
	
	<!-- 세탁소 요금 수정 -->
	<update id="updateFee" parameterType="fee">
		update fee
		set
		<!-- 세탁소 아이디, 옷 아이디, 가격 -->
		clothes_fee = #{clothesFee}
		where laundry_id = #{laundryId} and clothes_id = #{clothesId}
	</update>

	<!-- 세탁소 취급 옷 종류 추가 -->
	<insert id="insertClothes" parameterType="clothes">
		insert into clothes
		values (clothes_id_Seq.nextval , #{clothesName})
	</insert>

	<!-- 세탁소 취급 천 종류 추가 -->
	<insert id="insertFabric" parameterType="fabric">
		insert into Fabric
		values (fabric_Seq.nextval , #{fabricName}, #{fabricWashMethod})
	</insert>

	<!-- 세탁소 추가 가격 추가 -->
	<insert id="insertExtraFee" parameterType="extraFee">
		insert into Extra_Fee
		values (extra_Fee_Seq.nextval, #{fabricId}, laundry_Seq.currval, #{fabricFee}, #{extraFeeOperation} )
	</insert>
	
	<!-- 세탁소 추가 가격 수정 -->
	<update id="updateExtraFee" parameterType="extraFee">
		update Extra_Fee
		set
		fabric_fee = #{fabricFee}, extra_fee_operation = #{extraFeeOperation}
		where laundry_id = #{laundryId} and fabric_id = #{fabricId}
	</update>
	
	<!-- 이름으로 세탁소 구하기 -->
	<select id="selectByNameLaundry" parameterType="string" resultType="laundry">
		select *
			from(
			    select *
			    from laundry
			    where laundry_name like '%${parameter}%'

			)
		<![CDATA[where rownum <= 10]]> 
	</select>
	
	<!-- 사용자 주소 기반으로 세탁소 구하기 -->
	<select id="selectByMyLaundry" parameterType="string" resultType="laundry">
		select * 
			from (
			    select *
			    from laundry
			    where laundry_address like '%${_parameter}%'
			)
		where rownum <![CDATA[<=]]>  10
	</select>
	
	
	<!-- 주소로 세탁소 구하기 -->
	<select id="selectByAddressLaundry" parameterType="string" resultType="laundry">
		select *
			from(
			    select *
			    from laundry
			    where laundry_address like '%${parameter}%'
			)
		<![CDATA[where rownum <= 10]]> 
	</select>
	
	
	<!-- 가격 가장 낮은 세탁소 구하기 -->
	<select id="selectByLowestByLaundry" parameterType="map" resultType="laundry">
		select l.*, sum
			from (
			    select laundry_id, fabric_fee + clothes_fee as sum
			    from  extra_fee  join fee 
			    using (laundry_id) 
			    where fabric_id = #{FabricId} and clothes_id = #{clothesId}
			    order by sum asc
			) f join laundry l
			on f.laundry_id = l.laundry_id
		<![CDATA[where laundry_address like '%${userAddress}%' and rownum <= 1]]> 
	</select>
	
	<!-- 세탁소 아이디로 세탁소 구하기 -->
	<select id="selectByLaundryId" parameterType="string" resultType="laundry">
		select *
			from(
			    select *
			    from laundry
			    where user_id like '%${parameter}%'
			)
		<![CDATA[where rownum <= 10]]> 
	</select>

	<!-- 옷감 아이디로 세탁 방법 구하기 -->
	<select id="selectWashByFabric" parameterType="string" resultType="fabric">
	    select *
	    from fabric
	    where fabric_id like '%${parameter}%'
	</select>


</mapper>